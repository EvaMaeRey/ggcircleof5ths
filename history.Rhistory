if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
wrap_vector <- function(x, key){
len <- length(x)
start_index <- get_key_index(key)
c(x[start_index:len], x[1:(start_index-1)])
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord) |>
}
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90, r_prop = 1){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r*r_prop,
y = y0 + sin(around)*r*r_prop)
}
get_key_index <-function(key){
if(key %in% major){key_index <- which(major == key)}
if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90, r_prop = 1){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r*r_prop,
y = y0 + sin(around)*r*r_prop)
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30, r_prop = 1){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate, r_prop = r_prop) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate, r_prop = NULL){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
# mutate(r = ifelse(is_major)) |>
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, r_prop =.6) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, r_prop = .8) +
geom_labs(maj = F, r_prop = .4)
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90, r_prop = 1){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r*r_prop,
y = y0 + sin(around)*r*r_prop)
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
mutate(r = ifelse(is_major))
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
tibble(phrase = 1:7, chord = LETTERS[1:7]) |>
ggplot() +
aes(x0 = 0, y0 = 0, r = 1, chord = chord) +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4), size = 2) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2) +
coord_equal() +
facet_wrap(facet = vars(phrase), nrow = 2) +
labs(title = "An unusual chord progression, A to G in Alphabet")
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
get_key_index <-function(key){
if(key %in% major){key_index <- which(major == key)}
if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
wrap_vector <- function(x, key){
len <- length(x)
start_index <- get_key_index(key)
c(x[start_index:len], x[1:(start_index-1)])
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord) |>
}
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord)
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
get_key_index <-function(key){
if(key %in% major){key_index <- which(major == key)}
if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
wrap_vector <- function(x, key){
len <- length(x)
start_index <- get_key_index(key)
c(x[start_index:len], x[1:(start_index-1)])
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
tibble(phrase = 1:7, chord = LETTERS[1:7]) |>
ggplot() +
aes(x0 = 0, y0 = 0, r = 1, chord = chord) +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4), size = 2) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2) +
coord_equal() +
facet_wrap(facet = vars(phrase), nrow = 2) +
labs(title = "An unusual chord progression, A to G in Alphabet")
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30, r = 1){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate, r = 1){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord) |>
}
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
get_key_index <-function(key){
if(key %in% major){key_index <- which(major == key)}
if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
wrap_vector <- function(x, key){
len <- length(x)
start_index <- get_key_index(key)
c(x[start_index:len], x[1:(start_index-1)])
}
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
key = "C"
major = major_ref[keys_reorder_indices]
major
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
label
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
compute_panel_circle5ths <- function(data, scales, n_vertices = 12, maj = TRUE, rotate = 90){
data |>
mutate(group = row_number()) |>
crossing(tibble(z = 0:n_vertices)) |>
mutate(around = 2*pi*z/max(z) + rotate/180*pi) |>
mutate(xend = x0, yend = y0) |>
mutate(x = x0 + cos(around)*r,
y = y0 + sin(around)*r)
}
get_key_index <-function(key){
if(key %in% major){key_index <- which(major == key)}
if(key %in% minor){key_index <- which(minor == key)}
key_index
}
get_key_index(key = "D")
wrap_vector <- function(x, key){
len <- length(x)
start_index <- get_key_index(key)
c(x[start_index:len], x[1:(start_index-1)])
}
compute_group_spokes_labs <- function(data, scales, maj = T, key = "C", rotate = 90-30){
major_ref = c("C", "F" , "Bb", "Eb", "Ab", "Db", "Gb", "B",  "E",  "A",  "D",  "G")
minor_ref = c("Am", "Dm", "Gm" , "Cm", "Fm", "Bbm", "Ebm", "G#m", "C#m", "F#m", "Bm", "Em")
if(key %in% major_ref){key_index <- which(major_ref == key)}
if(key %in% minor_ref){key_index <- which(minor_ref == key)}
keys_reorder_indices <- if(key_index == 1){1:12}else{c(key_index:12, 1:(key_index-1))}
major = major_ref[keys_reorder_indices]
minor = minor_ref[keys_reorder_indices]
if(maj){label <- major}else{label <- minor}
compute_panel_circle5ths(data = data, scales = scales, maj = maj, key = key, rotate = rotate) |>
slice(-nrow(data)) |>
mutate(major = major) |>
mutate(minor = minor) |>
mutate(label = label)
}
compute_group_chord_highlight <- function(data, scales, maj = T, key = "C", rotate = rotate){
compute_group_spokes_labs(data = data, scales = scales, maj = maj, key = key) |>
mutate(is_major = chord %in% major) |>
filter(major == chord | minor == chord)
}
ggtemp:::create_layer_temp("geom_circle",
required_aes = c("x0", "y0", "r"),
compute_panel = compute_panel_circle5ths,
geom = ggplot2::GeomPath)
ggtemp:::create_layer_temp("geom_spoke",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomSegment)
ggtemp:::create_layer_temp("geom_labs",
required_aes = c("x0", "y0", "r"),
compute_group = compute_group_spokes_labs,
geom = ggplot2::GeomText)
ggtemp:::create_layer_temp("geom_chord_highlight",
required_aes = c("x0", "y0", "r", "chord"),
compute_group = compute_group_chord_highlight,
geom = ggplot2::GeomPoint)
library(ggplot2)
library(ggstamp)
ggcanvas() +
aes(x0 = 0, y0 = 0, r = 1, chord = "C") +
geom_circle(n_vertices = 50) +
geom_circle(n_vertices = 50, aes(r = .6)) +
geom_spoke(rotate = 90/6) +
geom_labs(maj = T, aes(r = .8)) +
geom_labs(maj = F, aes(r = .4)) +
geom_chord_highlight(aes(r = .8), size = 12, color = "red", alpha = .2)
savehistory("~/Google Drive/r_packages/ggcircleof5ths/history.Rhistory")
